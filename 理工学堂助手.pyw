import configparser
import io
import os
import base64
import threading
import webbrowser
import tkinter as tk
from tkinter import filedialog
from tkinter.constants import *
import keyring
import requests
import ttkbootstrap as ttk
import tkinter.font as tkfont
from PIL import Image, ImageTk
from docx import Document
from docx.oxml.ns import qn
from docx.shared import Inches
from docx.shared import RGBColor
from reportlab.lib import colors
from reportlab.lib.units import inch
from ttkbootstrap.dialogs import Messagebox
from ttkbootstrap.scrolled import ScrolledFrame

base_url = "http://lgxt.wutp.com.cn/api"
headers = {
    'Accept': '*/*',
    'Accept-Language': 'zh-CN,zh;q=0.9',
    'Content-Type': 'application/x-www-form-urlencoded',
}

session = requests.Session()

SERVICE_NAME = '理工学堂'


# 网络请求函数
def login(username, password):
    login_url = f"{base_url}/login"
    data = {
        'loginName': username,
        'password': password,
    }
    try:
        response = session.post(login_url, headers=headers, data=data, timeout=10)
        response.raise_for_status()
        result = response.json()
        if result['code'] == 0:
            token = result['data']
            headers['Authorization'] = token
            session.headers.update({'Authorization': token})
            return True, "欢迎回来！"
        else:
            return False, f"登录失败：{result['msg']}"
    except requests.exceptions.RequestException as e:
        return False, f"网络错误：{e}"


def get_user_info():
    user_info_url = f"{base_url}/userInfo"
    try:
        response = session.post(user_info_url, headers=headers, timeout=10)
        response.raise_for_status()
        result = response.json()
        if result['code'] == 0:
            user_info = result['data']
            return True, user_info
        else:
            return False, f"获取用户信息失败：{result['msg']}"
    except requests.exceptions.RequestException as e:
        return False, f"网络错误：{e}"


def get_my_courses():
    my_courses_url = f"{base_url}/myCourses"
    try:
        response = session.post(my_courses_url, headers=headers, timeout=10)
        response.raise_for_status()
        result = response.json()
        if result['code'] == 0:
            courses = result['data']
            return True, courses
        else:
            return False, f"获取课程列表失败：{result['msg']}"
    except requests.exceptions.RequestException as e:
        return False, f"网络错误：{e}"


def get_course_works(course_id):
    my_course_works_url = f"{base_url}/myCourseWorks"
    data = {
        'courseId': course_id,
    }
    try:
        response = session.post(my_course_works_url, headers=headers, data=data, timeout=10)
        response.raise_for_status()
        result = response.json()
        if result['code'] == 0:
            works = result['data']
            return True, works
        else:
            return False, f"获取课程作业失败：{result['msg']}"
    except requests.exceptions.RequestException as e:
        return False, f"网络错误：{e}"


def get_questions(work_id):
    show_questions_url = f"{base_url}/showQuestions"
    data = {
        'workId': work_id,
    }
    try:
        response = session.post(show_questions_url, headers=headers, data=data, timeout=10)
        response.raise_for_status()
        result = response.json()
        if result['code'] == 0:
            questions = result['data']
            return True, questions
        else:
            return False, f"获取题目失败：{result['msg']}"
    except requests.exceptions.RequestException as e:
        return False, f"网络错误：{e}"


def submit_answer(work_id, grade):
    submit_answer_url = f"{base_url}/submitAnswer"
    data = {
        'grade': grade,
        'workId': work_id,
    }
    try:
        response = session.post(submit_answer_url, headers=headers, data=data, timeout=10)
        response.raise_for_status()
        result = response.json()
        if result['code'] == 0:
            return True, f"答案提交成功，成绩：{grade}\n返回信息：{result['data']}"
        else:
            return False, f"答案提交失败：{result['msg']}"
    except requests.exceptions.RequestException as e:
        return False, f"网络错误：{e}"


class ModernApp:
    def __init__(self, main_window):
        self.progress_bar = None
        self.progress_window = None
        self.status_label = None
        self.path_entry = None
        self.remember_var = None
        self.grade_entry = None
        self.username_entry = None
        self.password_entry = None
        self.content_frame = None
        self.main_frame = None
        self.root = main_window
        self.root.title("理工学堂助手")
        self.style = ttk.Style("darkly")
        self.root.minsize(1100, 800)

        self.username = ""
        self.password = ""
        self.courses = []
        self.works = []
        self.questions = []
        self.images = []
        self.selected_course_id = None
        self.selected_work_id = None
        self.selected_course_name = ""
        self.selected_work_name = ""
        self.login_message = ""

        self.config = configparser.ConfigParser()
        self.config_file = os.path.join(os.path.dirname(__file__), 'config.ini')

        self.export_path = os.getcwd()
        self.export_word_var = tk.BooleanVar(value=True)
        self.export_word_include_answers_var = tk.BooleanVar(value=True)
        self.export_pdf_var = tk.BooleanVar(value=False)
        self.export_pdf_include_answers_var = tk.BooleanVar(value=True)

        self.load_config()

        self.setup_ui()

    def setup_ui(self):
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill=BOTH, expand=YES)

        self.create_sidebar()

        self.content_frame = ttk.Frame(self.main_frame, padding=20)
        self.content_frame.pack(side=LEFT, fill=BOTH, expand=YES)

        self.style.configure('TButton', font=('微软雅黑', 12))

        self.style.configure('primary.TButton', background='#007bff', foreground='white')
        self.style.map('primary.TButton',
                      background=[('pressed', '!disabled', '#0056b3'),
                                  ('active', '#0069d9')],
                      foreground=[('pressed', 'white'), ('disabled', 'gray')])

        self.style.configure('secondary.TButton', background='#6c757d', foreground='white')
        self.style.map('secondary.TButton',
                      background=[('pressed', '!disabled', '#5a6268'),
                                  ('active', '#545b62')],
                      foreground=[('pressed', 'white'), ('disabled', 'gray')])

        self.style.configure('info.TButton', background='#17a2b8', foreground='white')
        self.style.map('info.TButton',
                      background=[('pressed', '!disabled', '#138496'),
                                  ('active', '#117a8b')],
                      foreground=[('pressed', 'white'), ('disabled', 'gray')])

        self.style.configure('warning.TButton', background='#ffc107', foreground='black')
        self.style.map('warning.TButton',
                      background=[('pressed', '!disabled', '#d39e00'),
                                  ('active', '#e0a800')],
                      foreground=[('pressed', 'black'), ('disabled', 'gray')])

        # 默认显示登录页面
        self.show_login_page()

    def create_sidebar(self):
        sidebar = ttk.Frame(self.main_frame, style="Sidebar.TFrame", width=250)
        sidebar.pack(side=LEFT, fill=Y, padx=10, pady=10)
        sidebar.pack_propagate(False)

        logo_data = """
        
        """
        logo_image = ImageTk.PhotoImage(Image.open(io.BytesIO(base64.b64decode(logo_data))).resize((150, 150)).convert('RGBA'))
        logo_label = ttk.Label(sidebar, image=logo_image, style="Logo.TLabel")
        logo_label.image = logo_image
        logo_label.pack(pady=20)

        nav_buttons = [
            ("课程列表", self.show_courses_page),
            ("设置", self.show_settings_page),
            ("帮助", self.show_help),
            ("退出", self.root.quit)
        ]

        for text, command in nav_buttons:
            button = ttk.Button(sidebar, text=text, command=command, cursor="hand2")
            button.pack(fill=X, pady=10)

        label_font = tkfont.Font(family="宋体", size=10)
        label_font_underline = tkfont.Font(family="宋体", size=10, underline=1)

        separator = ttk.Separator(sidebar, orient='horizontal')
        separator.pack(fill=X, pady=20)

        version_label = ttk.Label(sidebar, text="版本 1.1.1", font=label_font, cursor="hand2")
        version_label.pack(side=BOTTOM, pady=10)
        version_label.bind("<Button-1>", self.open_web_help_interface)
        version_label.bind("<Enter>", lambda e: version_label.configure(font=label_font_underline))
        version_label.bind("<Leave>", lambda e: version_label.configure(font=label_font))

        copyright_label = ttk.Label(sidebar, text="© 2024 zygame1314", font=label_font, cursor="hand2")
        copyright_label.pack(side=BOTTOM, pady=5)
        copyright_label.bind("<Button-1>", self.open_github_homepage)
        copyright_label.bind("<Enter>", lambda e: copyright_label.configure(font=label_font_underline))
        copyright_label.bind("<Leave>", lambda e: copyright_label.configure(font=label_font))

    def open_github_homepage(self, event=None):
        webbrowser.open('https://github.com/zygame1314')

    def open_web_help_interface(self, event=None):
        webbrowser.open('https://zygame1314.github.io/LGXT-Assistant/')

    def show_help(self):
        help_window = ttk.Toplevel(self.root)
        help_window.title("帮助")
        help_window.geometry("800x600")
        help_window.resizable(True, True)

        content_frame = ScrolledFrame(help_window, autohide=True)
        content_frame.pack(fill=BOTH, expand=YES)

        ttk.Label(content_frame, text="欢迎使用理工学堂助手！", font=("微软雅黑", 20, "bold")).pack(pady=10)

        ttk.Label(content_frame, text="功能介绍：", font=("微软雅黑", 16, "bold")).pack(anchor="w", pady=5)
        features = [
            "1. 登录：输入用户名和密码进行登录。",
            "2. 课程列表：查看所有课程并选择查看作业。",
            "3. 作业列表：查看选定课程的所有作业。",
            "4. 题目列表：查看选定作业的所有题目。",
            "5. 设置：配置导出路径和格式。",
            "6. 帮助：查看本帮助信息。",
        ]
        for line in features:
            ttk.Label(content_frame, text=line, font=("微软雅黑", 12)).pack(anchor="w", padx=20)

        ttk.Label(content_frame, text="操作指南：", font=("微软雅黑", 16, "bold")).pack(anchor="w", pady=5)
        guidelines = [
            "1. 登录后，点击课程列表查看所有课程。",
            "2. 在课程列表中，点击查看作业查看该课程的所有作业。",
            "3. 在作业列表中，点击查看题目查看该作业的所有题目。",
            "4. 在题目列表中，可以导出题目或提交成绩。",
            "5. 在设置页面，可以配置导出路径和格式。",
        ]
        for line in guidelines:
            ttk.Label(content_frame, text=line, font=("微软雅黑", 12)).pack(anchor="w", padx=20)

        ttk.Label(content_frame, text="版权声明：", font=("微软雅黑", 16, "bold")).pack(anchor="w", pady=5)
        disclaimer = (
            "本软件为免费软件，仅供学习和交流使用，禁止用于任何商业用途。\n"
            "未经许可，禁止复制、修改、发布或出售本软件的任何部分。\n\n"
            "如有任何问题，请联系作者。\n"
            "感谢你的使用！"
        )
        ttk.Label(content_frame, text=disclaimer, font=("微软雅黑", 12), justify="left").pack(anchor="w", padx=20)
        
        def open_tutorial():
            webbrowser.open("https://zygame1314.github.io/LGXT-Assistant/")
        
        ttk.Button(content_frame, text="访问教程网页", command=open_tutorial, bootstyle='primary', cursor="hand2").pack(pady=10)

        ttk.Button(content_frame, text="关闭", command=help_window.destroy, bootstyle='danger', cursor="hand2").pack(pady=20)

    def show_login_page(self):
        self.clear_content()

        login_frame = ttk.Frame(self.content_frame, padding=20, style="Card.TFrame")
        login_frame.pack(expand=YES, pady=50)

        ttk.Label(login_frame, text="欢迎使用理工学堂助手", font=("微软雅黑", 24, "bold")).pack(pady=20)

        username_group = ttk.Labelframe(login_frame, text="用户名", padding=10)
        username_group.pack(fill=X, pady=10)
        self.username_entry = ttk.Entry(username_group)
        self.username_entry.pack(fill=X)

        password_group = ttk.Labelframe(login_frame, text="密码", padding=10)
        password_group.pack(fill=X, pady=10)
        self.password_entry = ttk.Entry(password_group, show="*")
        self.password_entry.pack(fill=X)

        self.remember_var = tk.BooleanVar()
        ttk.Checkbutton(login_frame, text="记住密码", variable=self.remember_var).pack(pady=10)

        ttk.Button(login_frame, text="登录", command=self.login, bootstyle="primary", width=20, cursor="hand2").pack(pady=10)

        saved_username = self.get_saved_username()
        saved_password = None
        if saved_username:
            self.username_entry.insert(0, saved_username)
            saved_password = self.get_saved_password(saved_username)
            if saved_password:
                self.password_entry.insert(0, saved_password)

        if saved_username and saved_password:
            self.remember_var.set(True)
        else:
            self.remember_var.set(False)

    def login(self):
        self.username = self.username_entry.get()
        self.password = self.password_entry.get()
        success, msg = login(self.username, self.password)
        if success:
            if self.remember_var.get():
                self.save_credentials(self.username, self.password)
            else:
                self.delete_saved_credentials()
            self.login_message = msg  # 存储登录成功的消息
            self.show_courses_page()
        else:
            Messagebox.show_error(message=msg, title="错误")

    def show_courses_page(self):
        if not self.username or not self.password:
            Messagebox.show_error(title="错误", message="请先登录")
            self.show_login_page()
            return

        self.clear_content()

        ttk.Label(self.content_frame, text="课程列表", font=("微软雅黑", 24, "bold")).pack(pady=20)

        courses_frame = ScrolledFrame(self.content_frame, autohide=True)
        courses_frame.pack(fill=BOTH, expand=YES)

        success, result = get_my_courses()
        if success:
            self.courses = result
            for course in self.courses:
                self.create_course_card(courses_frame, course)
        else:
            ttk.Label(courses_frame, text="获取课程列表失败", foreground="red").pack(pady=10)

        ttk.Button(self.content_frame, text="提交全部作业100分",
                command=self.submit_all_courses_100, bootstyle="warning", cursor="hand2").pack(pady=10)
        ttk.Button(self.content_frame, text="导出所有课程的作业",
                command=self.export_all_courses_assignments, bootstyle="info", cursor="hand2").pack(pady=10)

    def create_course_card(self, parent, course):
        card = ttk.Frame(parent, borderwidth=1, relief="solid", padding=5)
        card.pack(pady=5, padx=5, fill=X)

        row_frame = ttk.Frame(card)
        row_frame.pack(fill=X)

        ttk.Label(row_frame, text=course["courseName"], font=("微软雅黑", 14, "bold")).grid(row=0, column=0, sticky="w")

        ttk.Button(row_frame, text="查看", bootstyle="primary", cursor="hand2",
        command=lambda: self.select_course(course['courseId'], course['courseName'])).grid(row=0, column=1, sticky="e", padx=(0, 10))

        row_frame.columnconfigure(0, weight=1)
        row_frame.columnconfigure(1, weight=0)

    def select_course(self, course_id, course_name):
        self.selected_course_id = course_id
        self.selected_course_name = course_name
        success, result = get_course_works(self.selected_course_id)
        if success:
            self.works = result
            self.create_works_page()
        else:
            Messagebox.show_error(title="错误", message=result)

    def create_works_page(self):
        self.clear_content()

        ttk.Label(self.content_frame, text=f"{self.selected_course_name} - 作业列表",
                  font=("微软雅黑", 24, "bold")).pack(pady=20)

        works_frame = ScrolledFrame(self.content_frame, autohide=True)
        works_frame.pack(fill=BOTH, expand=YES)

        if not self.works:
            ttk.Label(works_frame, text="该课程目前没有可用的作业。").pack(pady=20)
        else:
            for work in self.works:
                self.create_work_card(works_frame, work)

        ttk.Button(self.content_frame, text="提交当前课程作业100分",
                command=self.submit_all_works_100, style='warning.TButton', cursor="hand2").pack(pady=10)
        ttk.Button(self.content_frame, text="导出当前课程的所有作业",
                command=self.export_all_works_of_current_course, style='info.TButton', cursor="hand2").pack(pady=10)
        ttk.Button(self.content_frame, text="返回课程列表",
                command=self.show_courses_page, style='secondary.TButton', cursor="hand2").pack(pady=10)

    def create_work_card(self, parent, work):
        card = ttk.Frame(parent, borderwidth=1, relief="solid", padding=5)
        card.pack(pady=5, padx=5, fill=X)

        row_frame = ttk.Frame(card)
        row_frame.pack(fill=X)

        ttk.Label(row_frame, text=work['workName'], font=("微软雅黑", 14, "bold")).grid(row=0, column=0, sticky="w")

        ttk.Button(row_frame, text="查看题目", bootstyle="primary", cursor="hand2",
                command=lambda: self.select_work(work['workId'], work['workName'])).grid(row=0, column=1, sticky="e", padx=(0, 5))
        ttk.Button(row_frame, text="导出所有题目", bootstyle="info", cursor="hand2",
                command=lambda: self.start_collecting_questions(work['workId'], work['workName'], self.selected_course_name)).grid(row=0, column=2, sticky="e", padx=(0, 10))

        row_frame.columnconfigure(0, weight=1)
        row_frame.columnconfigure(1, weight=0)
        row_frame.columnconfigure(2, weight=0)

    def select_work(self, work_id, work_name):
        self.selected_work_id = work_id
        self.selected_work_name = work_name
        success, result = get_questions(self.selected_work_id)
        if success:
            self.questions = result
            self.create_questions_page()
        else:
            Messagebox.show_error(title="错误", message=result)

    def create_questions_page(self):
        self.clear_content()

        ttk.Label(self.content_frame, text=f"{self.selected_work_name} - 题目列表",
                  font=("微软雅黑", 24, "bold")).pack(pady=20)

        questions_frame = ScrolledFrame(self.content_frame, autohide=True)
        questions_frame.pack(fill=BOTH, expand=YES)

        self.images = []  # 重置图像列表

        for idx, question in enumerate(self.questions):
            self.create_question_card(questions_frame, idx, question)

        grade_frame = ttk.Frame(self.content_frame)
        grade_frame.pack(pady=10)
        ttk.Label(grade_frame, text="提交成绩（0-100）：").pack(side='left', padx=5)
        self.grade_entry = ttk.Entry(grade_frame, width=10)
        self.grade_entry.pack(side='left', padx=5)
        ttk.Button(grade_frame, text="提交", command=self.submit_grade, style='primary.TButton', cursor="hand2").pack(side='left', padx=5)
        ttk.Button(self.content_frame, text="返回作业列表", command=self.create_works_page,
                style='secondary.TButton', cursor="hand2").pack(pady=10)

    def create_question_card(self, parent, idx, question):
        card = ttk.Frame(parent, borderwidth=1, relief="raised", padding=10)
        card.pack(pady=10, padx=10, fill=X)

        ttk.Label(card, text=f"题目 {idx + 1}", font=("微软雅黑", 16, "bold")).pack(anchor="w")
        ttk.Label(card, text=f"题目ID：{question.get('id', 'N/A')}").pack(anchor="w")
        ttk.Label(card, text=f"题目名称：{question.get('name', 'N/A')}").pack(anchor="w")

        imgurl = question.get('imgurl', 'N/A')
        if imgurl and imgurl != 'N/A':
            self.load_and_display_image(card, imgurl)
        else:
            ttk.Label(card, text="没有图片").pack(anchor="w")

        ttk.Label(card, text=f"答案：{question.get('answer', 'N/A')}",
                  font=("微软雅黑", 12, "italic"), foreground="yellow").pack(anchor="w", pady=5)

    def load_and_display_image(self, parent, imgurl):
        try:
            response = session.get(imgurl)
            response.raise_for_status()
            image_data = response.content
            image = Image.open(io.BytesIO(image_data))

            # 调整图像大小
            max_width = 400
            max_height = 300
            image.thumbnail((max_width, max_height))

            photo = ImageTk.PhotoImage(image)
            self.images.append(photo)
            image_label = ttk.Label(parent, image=photo)
            image_label.pack(anchor='w', pady=5)
        except Exception as e:
            ttk.Label(parent, text=f"无法加载图片：{str(e)}", foreground='red').pack(anchor='w')

    def submit_grade(self):
        grade = self.grade_entry.get()
        if grade.isdigit() and 0 <= int(grade) <= 100:
            success, result = submit_answer(self.selected_work_id, grade)
            if success:
                Messagebox.show_info(title="提示", message=result)
            else:
                Messagebox.show_error(title="错误", message=result)
        else:
            Messagebox.show_error(title="错误", message="请输入有效的成绩（0-100）。")

    def show_settings_page(self):
        self.clear_content()

        self.style.configure('Custom.TFrame', font=('微软雅黑', 12))
        self.style.configure('Custom.TLabel', font=('微软雅黑', 12))
        self.style.configure('Custom.TCheckbutton', font=('微软雅黑', 12))
        self.style.configure('Custom.TButton', font=('微软雅黑', 12))
        self.style.configure('Custom.TLabelframe', font=('微软雅黑', 12))
        self.style.configure('Custom.TLabelframe.Label', font=('微软雅黑', 12))
        self.style.configure('Custom.TEntry', font=('微软雅黑', 12))

        settings_frame = ttk.Frame(self.content_frame, padding=20, style="Card.TFrame")
        settings_frame.pack(fill=BOTH, expand=YES, padx=20, pady=20)

        ttk.Label(settings_frame, text="设置", style='Custom.TLabel',
                font=("微软雅黑", 24, "bold")).pack(pady=20)

        export_frame = ttk.LabelFrame(settings_frame, text="导出设置", padding=10,
                                    bootstyle="info", style='Custom.TLabelframe')
        export_frame.pack(fill=X, pady=10)

        export_options_frame = ttk.Frame(export_frame, style='Custom.TFrame')
        export_options_frame.pack(fill=X, pady=10)

        self.export_word_check = ttk.Checkbutton(export_options_frame, text="导出为 Word", variable=self.export_word_var,
                                                style='Custom.TCheckbutton', command=self.toggle_word_options)
        self.export_word_check.grid(row=0, column=0, sticky="w", padx=10, pady=5)

        self.export_word_answers_check = ttk.Checkbutton(export_options_frame, text="导出答案",
                                                        variable=self.export_word_include_answers_var,
                                                        style='Custom.TCheckbutton')
        self.export_word_answers_check.grid(row=1, column=0, sticky="w", padx=30, pady=5)

        self.export_pdf_check = ttk.Checkbutton(export_options_frame, text="导出为 PDF", variable=self.export_pdf_var,
                                                style='Custom.TCheckbutton', command=self.toggle_pdf_options)
        self.export_pdf_check.grid(row=0, column=1, sticky="w", padx=10, pady=5)

        self.export_pdf_answers_check = ttk.Checkbutton(export_options_frame, text="导出答案",
                                                        variable=self.export_pdf_include_answers_var,
                                                        style='Custom.TCheckbutton')
        self.export_pdf_answers_check.grid(row=1, column=1, sticky="w", padx=30, pady=5)

        self.toggle_word_options()
        self.toggle_pdf_options()

        path_frame = ttk.LabelFrame(settings_frame, text="导出路径", padding=10,
                                    bootstyle="info", style='Custom.TLabelframe')
        path_frame.pack(fill=X, pady=10)

        path_inner_frame = ttk.Frame(path_frame, style='Custom.TFrame')
        path_inner_frame.pack(fill=X)

        ttk.Label(path_inner_frame, text="路径：", style='Custom.TLabel').grid(row=0, column=0, sticky="w", padx=5, pady=5)
        self.path_entry = ttk.Entry(path_inner_frame, style='Custom.TEntry')
        self.path_entry.grid(row=0, column=1, sticky="we", padx=5, pady=5)
        self.path_entry.insert(0, self.export_path)
        ttk.Button(path_inner_frame, text="浏览", command=self.choose_export_path,
                cursor="hand2", style='Custom.TButton').grid(row=0, column=2, padx=5, pady=5)

        path_inner_frame.columnconfigure(1, weight=1)

        buttons_frame = ttk.Frame(settings_frame, style='Custom.TFrame')
        buttons_frame.pack(pady=20)

        ttk.Button(buttons_frame, text="保存设置", command=self.save_settings,
                bootstyle='primary', cursor="hand2", width=15,
                style='Custom.TButton').pack(side=LEFT, padx=10)
        ttk.Button(buttons_frame, text="查看用户信息", command=self.view_user_info,
                bootstyle='info', cursor="hand2", width=15,
                style='Custom.TButton').pack(side=LEFT, padx=10)
        
    def toggle_word_options(self):
        if self.export_word_var.get():
            self.export_word_answers_check.state(['!disabled'])
        else:
            self.export_word_answers_check.state(['disabled'])

    def toggle_pdf_options(self):
        if self.export_pdf_var.get():
            self.export_pdf_answers_check.state(['!disabled'])
        else:
            self.export_pdf_answers_check.state(['disabled'])

    def choose_export_path(self):
        path = filedialog.askdirectory(initialdir=self.export_path)
        if path:
            self.path_entry.delete(0, END)
            self.path_entry.insert(0, path)
            self.export_path = path  # 更新保存路径

    def save_settings(self):
        self.export_path = self.path_entry.get()
        self.save_config()
        Messagebox.show_info(title="提示", message="设置已保存")

    def clear_content(self):
        for widget in self.content_frame.winfo_children():
            widget.destroy()

    def load_config(self):
        if os.path.exists(self.config_file):
            self.config.read(self.config_file, encoding='utf-8')
            if 'Settings' in self.config:
                settings = self.config['Settings']
                self.export_path = settings.get('export_path', self.export_path)
                self.export_word_var.set(settings.getboolean('export_word', True))
                self.export_word_include_answers_var.set(settings.getboolean('export_word_include_answers', True))
                self.export_pdf_var.set(settings.getboolean('export_pdf', False))
                self.export_pdf_include_answers_var.set(settings.getboolean('export_pdf_include_answers', True))
        else:
            self.config['Settings'] = {
                'export_path': self.export_path,
                'export_word': 'True',
                'export_word_include_answers': 'True',
                'export_pdf': 'False',
                'export_pdf_include_answers': 'True',
            }
            with open(self.config_file, 'w', encoding='utf-8') as configfile:
                self.config.write(configfile)

    def save_config(self):
        if 'Settings' not in self.config:
            self.config['Settings'] = {}
        self.config['Settings']['export_path'] = self.export_path
        self.config['Settings']['export_word'] = str(self.export_word_var.get())
        self.config['Settings']['export_word_include_answers'] = str(self.export_word_include_answers_var.get())
        self.config['Settings']['export_pdf'] = str(self.export_pdf_var.get())
        self.config['Settings']['export_pdf_include_answers'] = str(self.export_pdf_include_answers_var.get())
        with open(self.config_file, 'w', encoding='utf-8') as configfile:
            self.config.write(configfile)

    @staticmethod
    def save_credentials(username, password):
        keyring.set_password(SERVICE_NAME, 'username', username)
        keyring.set_password(SERVICE_NAME, username, password)

    @staticmethod
    def get_saved_username():
        return keyring.get_password(SERVICE_NAME, 'username')

    @staticmethod
    def get_saved_password(username):
        return keyring.get_password(SERVICE_NAME, username)

    def delete_saved_credentials(self):
        saved_username = self.get_saved_username()
        if saved_username:
            keyring.delete_password(SERVICE_NAME, saved_username)
        keyring.delete_password(SERVICE_NAME, 'username')

    @staticmethod
    def view_user_info():
        success, result = get_user_info()
        if success:
            info = result

            def get_field(field_name):
                value = info.get(field_name)
                return value if value else 'N/A'

            message = (
                f"姓名：{get_field('userName')}\n"
                f"邮箱：{get_field('email')}\n"
                f"学号：{get_field('studentNo')}\n"
                f"学院：{get_field('schoolName')}\n"
                f"班级：{get_field('deptName')}\n"
                f"电话号码：{get_field('phonenumber')}"
            )

            Messagebox.show_info(title="用户信息", message=message)
        else:
            Messagebox.show_error(title="错误", message=result)

    def start_collecting_questions(self, work_id, work_name, course_name):
        assignment_name_clean = ''.join(c for c in work_name if c not in r'<>:"/\|?*')
        course_name_clean = ''.join(c for c in course_name if c not in r'<>:"/\|?*')

        progress_window = ttk.Toplevel(self.root)
        progress_window.title(f"收集作业 {assignment_name_clean} 的题目")
        progress_window.resizable(False, False)

        content_frame = ttk.Frame(progress_window, padding=20, style="Card.TFrame")
        content_frame.pack(expand=True, fill="both")

        self.status_label = ttk.Label(content_frame, text="开始收集题目，请稍候...", font=("微软雅黑", 12), anchor="center")
        self.status_label.pack(pady=(20, 10), expand=True, fill="x")

        self.progress_bar = ttk.Progressbar(content_frame, mode='indeterminate', length=300, bootstyle="info")
        self.progress_bar.pack(pady=(10, 20), expand=True, fill="x")
        self.progress_bar.start()

        threading.Thread(target=self.collect_all_questions,
                     args=(work_id, assignment_name_clean, course_name_clean, 100, progress_window)).start()

    def collect_all_questions(self, work_id, assignment_name, course_name, max_iterations=100, progress_window=None):
        collected_questions = {}
        no_new_questions_count = 0

        for i in range(max_iterations):
            success, questions = get_questions(work_id)
            if success:
                new_question_found = False
                for question in questions:
                    question_id = question.get('id')
                    if question_id not in collected_questions:
                        collected_questions[question_id] = question
                        new_question_found = True

                if new_question_found:
                    no_new_questions_count = 0
                    status_message = f"已收集到 {len(collected_questions)} 道题目。"
                else:
                    no_new_questions_count += 1
                    status_message = f"未发现新题目，已连续 {no_new_questions_count} 次未发现新题目。（最多重试10次）"
                    if no_new_questions_count >= 10:
                        status_message += "\n连续10次未获取到新题目，停止收集。"
                        self.root.after(0, self.status_label.config, {'text': status_message})
                        break

                self.root.after(0, self.status_label.config, {'text': status_message})
            else:
                status_message = f"获取题目失败：{questions}"
                self.root.after(0, self.status_label.config, {'text': status_message})
                break

        self.save_collected_questions(collected_questions, work_name=assignment_name, course_name=course_name, 
                              work_id=work_id, course_id=self.selected_course_id, chapter_name=assignment_name)

        self.root.after(0, self.status_label.config, {'text': f"收集完成，共收集到 {len(collected_questions)} 道题目。"})
        self.root.after(0, self.progress_bar.stop)

        self.root.after(500, progress_window.destroy)

    def save_collected_questions(self, collected_questions, work_name, course_name, work_id, course_id, chapter_name):
        assignment_name_clean = ''.join(c for c in work_name if c not in r'<>:"/\|?*')
        course_name_clean = ''.join(c for c in course_name if c not in r'<>:"/\|?*')

        assignment_name = f"{assignment_name_clean} (ID_{work_id})"
        course_folder_name = f"{course_name_clean} (ID_{course_id})"

        assignment_folder = os.path.join(self.export_path, '作业', course_folder_name, assignment_name)
        if not os.path.exists(assignment_folder):
            os.makedirs(assignment_folder)

        for question in collected_questions.values():
            self.save_question(question, assignment_folder)

        if self.export_word_var.get():
            export_answers = self.export_word_include_answers_var.get()
            self.save_questions_to_word(collected_questions, assignment_folder, chapter_name, 
                                        export_answers=export_answers)

        if self.export_pdf_var.get():
            export_answers = self.export_pdf_include_answers_var.get()
            self.save_questions_to_pdf(collected_questions, assignment_folder, chapter_name, 
                                    export_answers=export_answers)

    def export_all_courses_assignments(self):
        self.create_progress_window("正在导出所有课程的作业，请稍候...")
        threading.Thread(target=self._export_all_courses_assignments).start()

    def create_progress_window(self, title):
        self.progress_window = ttk.Toplevel(self.root)
        self.progress_window.title(title)
        self.progress_window.resizable(False, False)

        content_frame = ttk.Frame(self.progress_window, padding=20, style="Card.TFrame")
        content_frame.pack(expand=True, fill="both")

        self.status_label = ttk.Label(content_frame, text="", font=("微软雅黑", 12), anchor="center")
        self.status_label.pack(pady=(20, 10), expand=True, fill="x")

        self.progress_bar = ttk.Progressbar(content_frame, mode='determinate', length=300, bootstyle="info")
        self.progress_bar.pack(pady=(10, 20), expand=True, fill="x")

    def _export_all_courses_assignments(self):
        total_courses = len(self.courses)
        all_course_works = []
        messages = []

        total_works = 0
        for course in self.courses:
            course_id = course['courseId']
            course_name = course['courseName']
            success, result = get_course_works(course_id)
            if success:
                works = result
                total_works += len(works)
                all_course_works.append((course_id, course_name, works))
            else:
                messages.append(f"获取课程 '{course_name}' 的作业失败：{result}")

        if total_works == 0:
            self.root.after(0, self.progress_window.destroy)
            self.root.after(0, self._show_export_all_courses_results, total_courses, total_works, messages)
            return

        processed_works = 0
        self.root.after(0, self.progress_bar.config, {'maximum': total_works})

        for course_id, course_name, works in all_course_works:
            for work in works:
                work_id = work['workId']
                work_name = work['workName']
                status_text = f"正在导出课程：{course_name}\n作业：{work_name}"
                self.root.after(0, self.status_label.config, {'text': status_text})
                collected_questions = self.batch_collect_questions_with_progress(work_id, course_name, work_name)
                if collected_questions:
                    self.save_collected_questions(collected_questions, work_name, course_name, work_id, course_id, work_name)
                    messages.append(f"课程 '{course_name}' 的作业 '{work_name}' 导出成功。")
                else:
                    messages.append(f"课程 '{course_name}' 的作业 '{work_name}' 导出失败。")
                processed_works += 1
                self.root.after(0, self.progress_bar.config, {'value': processed_works})

        self.root.after(0, self.progress_window.destroy)
        self.root.after(0, self._show_export_all_courses_results, total_courses, total_works, messages)

    @staticmethod
    def _show_export_all_courses_results(total_courses, total_works, messages):
        message = "\n".join(messages)
        message = f"共处理 {total_courses} 门课程，{total_works} 个作业。\n\n{message}"
        Messagebox.show_info(title="导出结果", message=message)

    def batch_collect_questions_with_progress(self, work_id, course_name, work_name):
        collected_questions = {}
        max_iterations = 100
        no_new_questions_count = 0

        for _ in range(max_iterations):
            success, questions = get_questions(work_id)
            if success:
                new_question_found = False
                for question in questions:
                    question_id = question.get('id')
                    if question_id not in collected_questions:
                        collected_questions[question_id] = question
                        new_question_found = True
                if not new_question_found:
                    no_new_questions_count += 1
                    if no_new_questions_count >= 10:
                        break
                else:
                    no_new_questions_count = 0
                    status_text = (f"正在导出课程：{course_name}\n"
                                   f"作业：{work_name}\n"
                                   f"已获取题目数量：{len(collected_questions)}")
                    self.root.after(0, self.status_label.config, {'text': status_text})
            else:
                break
        return collected_questions

    def submit_all_courses_100(self):
        threading.Thread(target=self._submit_all_courses_100).start()

    def _submit_all_courses_100(self):
        total_courses = len(self.courses)
        total_works = 0
        success_count = 0
        fail_count = 0
        messages = []
        for course in self.courses:
            course_id = course['courseId']
            course_name = course['courseName']
            success, result = get_course_works(course_id)
            if success:
                works = result
                total_works += len(works)
                for work in works:
                    work_id = work['workId']
                    work_name = work['workName']
                    submit_success, submit_result = submit_answer(work_id, '100')
                    if submit_success:
                        success_count += 1
                        messages.append(f"课程 '{course_name}' 的作业 '{work_name}' 提交成功。")
                    else:
                        fail_count += 1
                        messages.append(f"课程 '{course_name}' 的作业 '{work_name}' 提交失败：{submit_result}")
            else:
                messages.append(f"获取课程 '{course_name}' 的作业失败：{result}")
        self.root.after(0, self._show_submit_all_courses_results, total_courses, total_works, success_count, fail_count,
                        messages)

    @staticmethod
    def _show_submit_all_courses_results(total_courses, total_works, success_count, fail_count, messages):
        message = "\n".join(messages)
        message = (f"共处理 {total_courses} 门课程，{total_works} 个作业。"
                   f"\n成功提交 {success_count} 个作业，失败 {fail_count} 个作业。\n\n{message}")
        Messagebox.show_info(title="提交结果", message=message)

    def submit_all_works_100(self):
        threading.Thread(target=self._submit_all_works_100).start()

    def _submit_all_works_100(self):
        success_count = 0
        fail_count = 0
        messages = []
        for work in self.works:
            work_id = work['workId']
            work_name = work['workName']
            success, result = submit_answer(work_id, '100')
            if success:
                success_count += 1
                messages.append(f"作业 '{work_name}' 提交成功。")
            else:
                fail_count += 1
                messages.append(f"作业 '{work_name}' 提交失败：{result}")
        self.root.after(0, self._show_submit_results, success_count, fail_count, messages)

    @staticmethod
    def _show_submit_results(success_count, fail_count, messages):
        message = "\n".join(messages)
        message = f"成功提交 {success_count} 个作业，失败 {fail_count} 个作业。\n\n{message}"
        Messagebox.show_info(title="提交结果", message=message)

    def export_all_works_of_current_course(self):
        self.create_progress_window("正在导出当前课程的所有作业，请稍候...")
        threading.Thread(target=self._export_all_works_of_current_course).start()

    def _export_all_works_of_current_course(self):
        total_works = len(self.works)
        processed_works = 0
        messages = []
        course_name = self.selected_course_name
        course_id = self.selected_course_id

        self.root.after(0, self.progress_bar.config, {'maximum': total_works})

        for work in self.works:
            work_id = work['workId']
            work_name = work['workName']
            status_text = f"正在导出作业：{work_name}"
            self.root.after(0, self.status_label.config, {'text': status_text})
            collected_questions = self.batch_collect_questions_with_progress(work_id, course_name, work_name)
            if collected_questions:
                self.save_collected_questions(collected_questions, work_name, course_name, work_id, course_id, work_name)
                messages.append(f"作业 '{work_name}' 导出成功。")
            else:
                messages.append(f"作业 '{work_name}' 导出失败。")
            processed_works += 1
            self.root.after(0, self.progress_bar.config, {'value': processed_works})

        self.root.after(0, self.progress_window.destroy)
        self.root.after(0, self._show_export_all_works_results, total_works, messages)

    @staticmethod
    def _show_export_all_works_results(total_works, messages):
        message = "\n".join(messages)
        message = f"共处理 {total_works} 个作业。\n\n{message}"
        Messagebox.show_info(title="导出结果", message=message)

    @staticmethod
    def save_question(question, assignment_folder):
        question_id = question.get('id', 'N/A')
        imgurl = question.get('imgurl', 'N/A')

        images_folder = os.path.join(assignment_folder, '题目图片')
        if not os.path.exists(images_folder):
            os.makedirs(images_folder)

        if imgurl and imgurl != 'N/A':
            try:
                response = session.get(imgurl)
                response.raise_for_status()
                image_data = response.content
                image_path = os.path.join(images_folder, f"{question_id}.png")
                with open(image_path, 'wb') as img_file:
                    img_file.write(image_data)
            except Exception as e:
                print(f"无法下载题目 {question_id} 的图片：{e}")

    @staticmethod
    def save_questions_to_word(collected_questions, assignment_folder, work_name, export_answers=True):
        document = Document()

        style = document.styles['Normal']
        font_style = style.font
        font_style.name = '宋体'
        font_style.element.rPr.rFonts.set(qn('w:eastAsia'), '宋体')

        document.add_heading(work_name, 0)

        images_folder = os.path.join(assignment_folder, '题目图片')

        sorted_question_ids = sorted(collected_questions.keys(), key=lambda x: int(x))

        for idx, question_id in enumerate(sorted_question_ids):
            question = collected_questions[question_id]
            name = question.get('name', 'N/A')
            answer = question.get('answer', 'N/A')

            document.add_heading(f'题目 {idx + 1}: {name}', level=2)

            image_path = os.path.join(images_folder, f"{question_id}.png")
            if os.path.exists(image_path):
                document.add_picture(image_path, width=Inches(5))
            else:
                document.add_paragraph("（无图片）")

            if export_answers:
                answer_paragraph = document.add_paragraph("答案：")
                answer_run = answer_paragraph.add_run(answer)
                answer_run.font.color.rgb = RGBColor(255, 0, 0)

        docx_path = os.path.join(assignment_folder, f'{work_name}.docx')
        document.save(docx_path)

    @staticmethod
    def save_questions_to_pdf(collected_questions, assignment_folder, work_name, export_answers=True):
        from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.cidfonts import UnicodeCIDFont
        from reportlab.platypus import BaseDocTemplate, Frame, PageTemplate, Paragraph, Image as RLImage, Spacer
        from reportlab.lib.pagesizes import A4
        from reportlab.lib.utils import ImageReader

        pdfmetrics.registerFont(UnicodeCIDFont('STSong-Light'))

        styles = getSampleStyleSheet()
        styles.add(ParagraphStyle(
            name='ChineseTitle',
            parent=styles['Title'],
            fontName='STSong-Light',
            fontSize=20,
            leading=24,
            alignment=1,
            textColor=colors.HexColor('#333333')
        ))
        styles.add(ParagraphStyle(
            name='ChineseHeading1',
            parent=styles['Heading1'],
            fontName='STSong-Light',
            fontSize=16,
            leading=20,
            textColor=colors.HexColor('#555555')
        ))
        styles.add(ParagraphStyle(
            name='Chinese',
            fontName='STSong-Light',
            fontSize=12,
            leading=18,
            textColor=colors.HexColor('#000000')
        ))
        normal_style = styles['Chinese']

        def add_page_number(canvas, _doc):
            page_num = canvas.getPageNumber()
            text = f"第 {page_num} 页"
            canvas.setFont('STSong-Light', 9)
            canvas.drawRightString(A4[0] - 50, 15, text)

        left_margin = 40
        right_margin = 40
        top_margin = 60
        bottom_margin = 60

        doc = BaseDocTemplate(
            os.path.join(assignment_folder, f'{work_name}.pdf'),
            pagesize=A4,
            rightMargin=right_margin,
            leftMargin=left_margin,
            topMargin=top_margin,
            bottomMargin=bottom_margin
        )

        page_width, page_height = A4
        frame_width = page_width - left_margin - right_margin
        frame_height = page_height - top_margin - bottom_margin

        frame = Frame(left_margin, bottom_margin, frame_width, frame_height, id='normal')

        template = PageTemplate(id='test', frames=frame, onPage=add_page_number)
        doc.addPageTemplates([template])

        elements = [Paragraph(f'{work_name}', styles['ChineseTitle']), Spacer(1, 0.3 * inch)]

        images_folder = os.path.join(assignment_folder, '题目图片')

        sorted_question_ids = sorted(collected_questions.keys(), key=lambda x: int(x))

        for idx, question_id in enumerate(sorted_question_ids):
            question = collected_questions[question_id]
            name = question.get('name', 'N/A')
            answer = question.get('answer', 'N/A')

            title_text = f'题目 {idx + 1}: {name}'
            elements.append(Paragraph(title_text, styles['ChineseHeading1']))
            elements.append(Spacer(1, 0.1 * inch))

            image_path = os.path.join(images_folder, f"{question_id}.png")
            if os.path.exists(image_path):
                img = ImageReader(image_path)
                img_width, img_height = img.getSize()
                aspect = img_height / float(img_width)

                img_display_width = doc.width * 0.8
                img_display_height = img_display_width * aspect

                elements.append(RLImage(image_path, width=img_display_width, height=img_display_height))
            else:
                elements.append(Paragraph("（无图片）", normal_style))

            if export_answers:
                answer_paragraph = Paragraph(f"答案：<font color='red'>{answer}</font>", normal_style)
                elements.append(answer_paragraph)

            elements.append(Spacer(1, 0.2 * inch))

        doc.build(elements)


if __name__ == "__main__":
    root = ttk.Window()
    app = ModernApp(root)
    root.mainloop()
